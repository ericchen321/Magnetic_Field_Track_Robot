0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Apr 03 18:46:16 2017
0000              5   ;--------------------------------------------------------
                  5   $name Receiver
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _DebuggingFctn
0000             30            public _MotorControl
0000             31            public _DetermineMode
0000             32            public _ReadFrequency
0000             33            public _Timer2_ISR
0000             34            public _Volts_at_Pin
0000             35            public _ADC_at_Pin
0000             36            public _InitPinADC
0000             37            public _InitADC
0000             38            public _TIMER2_Init
0000             39            public _TIMER0_Init
0000             40            public _waitms
0000             41            public _Timer3us
0000             42            public __c51_external_startup
0000             43            public _millisecond
0000             44            public _WriteCount
0000             45            public _FreqBuffer
0000             46            public _mode
0000             47            public _frequency
0000             48            public _overflow_count
0000             49            public _dirout
0000             50            public _pwm_RED1
0000             51            public _pwm_RED0
0000             52            public _pwm_BLU1
0000             53            public _pwm_BLU0
0000             54            public _power
0000             55            public _pwm_count
0000             56   ;--------------------------------------------------------
0000             57   ; Special Function Registers
0000             58   ;--------------------------------------------------------
0000             59   _P0             DATA 0x80
0000             60   _SP             DATA 0x81
0000             61   _DPL            DATA 0x82
0000             62   _DPH            DATA 0x83
0000             63   _EMI0TC         DATA 0x84
0000             64   _EMI0CF         DATA 0x85
0000             65   _OSCLCN         DATA 0x86
0000             66   _PCON           DATA 0x87
0000             67   _TCON           DATA 0x88
0000             68   _TMOD           DATA 0x89
0000             69   _TL0            DATA 0x8a
0000             70   _TL1            DATA 0x8b
0000             71   _TH0            DATA 0x8c
0000             72   _TH1            DATA 0x8d
0000             73   _CKCON          DATA 0x8e
0000             74   _PSCTL          DATA 0x8f
0000             75   _P1             DATA 0x90
0000             76   _TMR3CN         DATA 0x91
0000             77   _TMR4CN         DATA 0x91
0000             78   _TMR3RLL        DATA 0x92
0000             79   _TMR4RLL        DATA 0x92
0000             80   _TMR3RLH        DATA 0x93
0000             81   _TMR4RLH        DATA 0x93
0000             82   _TMR3L          DATA 0x94
0000             83   _TMR4L          DATA 0x94
0000             84   _TMR3H          DATA 0x95
0000             85   _TMR4H          DATA 0x95
0000             86   _USB0ADR        DATA 0x96
0000             87   _USB0DAT        DATA 0x97
0000             88   _SCON           DATA 0x98
0000             89   _SCON0          DATA 0x98
0000             90   _SBUF           DATA 0x99
0000             91   _SBUF0          DATA 0x99
0000             92   _CPT1CN         DATA 0x9a
0000             93   _CPT0CN         DATA 0x9b
0000             94   _CPT1MD         DATA 0x9c
0000             95   _CPT0MD         DATA 0x9d
0000             96   _CPT1MX         DATA 0x9e
0000             97   _CPT0MX         DATA 0x9f
0000             98   _P2             DATA 0xa0
0000             99   _SPI0CFG        DATA 0xa1
0000            100   _SPI0CKR        DATA 0xa2
0000            101   _SPI0DAT        DATA 0xa3
0000            102   _P0MDOUT        DATA 0xa4
0000            103   _P1MDOUT        DATA 0xa5
0000            104   _P2MDOUT        DATA 0xa6
0000            105   _P3MDOUT        DATA 0xa7
0000            106   _IE             DATA 0xa8
0000            107   _CLKSEL         DATA 0xa9
0000            108   _EMI0CN         DATA 0xaa
0000            109   __XPAGE         DATA 0xaa
0000            110   _SBCON1         DATA 0xac
0000            111   _P4MDOUT        DATA 0xae
0000            112   _PFE0CN         DATA 0xaf
0000            113   _P3             DATA 0xb0
0000            114   _OSCXCN         DATA 0xb1
0000            115   _OSCICN         DATA 0xb2
0000            116   _OSCICL         DATA 0xb3
0000            117   _SBRLL1         DATA 0xb4
0000            118   _SBRLH1         DATA 0xb5
0000            119   _FLSCL          DATA 0xb6
0000            120   _FLKEY          DATA 0xb7
0000            121   _IP             DATA 0xb8
0000            122   _CLKMUL         DATA 0xb9
0000            123   _SMBTC          DATA 0xb9
0000            124   _AMX0N          DATA 0xba
0000            125   _AMX0P          DATA 0xbb
0000            126   _ADC0CF         DATA 0xbc
0000            127   _ADC0L          DATA 0xbd
0000            128   _ADC0H          DATA 0xbe
0000            129   _SFRPAGE        DATA 0xbf
0000            130   _SMB0CN         DATA 0xc0
0000            131   _SMB1CN         DATA 0xc0
0000            132   _SMB0CF         DATA 0xc1
0000            133   _SMB1CF         DATA 0xc1
0000            134   _SMB0DAT        DATA 0xc2
0000            135   _SMB1DAT        DATA 0xc2
0000            136   _ADC0GTL        DATA 0xc3
0000            137   _ADC0GTH        DATA 0xc4
0000            138   _ADC0LTL        DATA 0xc5
0000            139   _ADC0LTH        DATA 0xc6
0000            140   _P4             DATA 0xc7
0000            141   _TMR2CN         DATA 0xc8
0000            142   _TMR5CN         DATA 0xc8
0000            143   _REG01CN        DATA 0xc9
0000            144   _TMR2RLL        DATA 0xca
0000            145   _TMR5RLL        DATA 0xca
0000            146   _TMR2RLH        DATA 0xcb
0000            147   _TMR5RLH        DATA 0xcb
0000            148   _TMR2L          DATA 0xcc
0000            149   _TMR5L          DATA 0xcc
0000            150   _TMR2H          DATA 0xcd
0000            151   _TMR5H          DATA 0xcd
0000            152   _SMB0ADM        DATA 0xce
0000            153   _SMB1ADM        DATA 0xce
0000            154   _SMB0ADR        DATA 0xcf
0000            155   _SMB1ADR        DATA 0xcf
0000            156   _PSW            DATA 0xd0
0000            157   _REF0CN         DATA 0xd1
0000            158   _SCON1          DATA 0xd2
0000            159   _SBUF1          DATA 0xd3
0000            160   _P0SKIP         DATA 0xd4
0000            161   _P1SKIP         DATA 0xd5
0000            162   _P2SKIP         DATA 0xd6
0000            163   _USB0XCN        DATA 0xd7
0000            164   _PCA0CN         DATA 0xd8
0000            165   _PCA0MD         DATA 0xd9
0000            166   _PCA0CPM0       DATA 0xda
0000            167   _PCA0CPM1       DATA 0xdb
0000            168   _PCA0CPM2       DATA 0xdc
0000            169   _PCA0CPM3       DATA 0xdd
0000            170   _PCA0CPM4       DATA 0xde
0000            171   _P3SKIP         DATA 0xdf
0000            172   _ACC            DATA 0xe0
0000            173   _XBR0           DATA 0xe1
0000            174   _XBR1           DATA 0xe2
0000            175   _XBR2           DATA 0xe3
0000            176   _IT01CF         DATA 0xe4
0000            177   _CKCON1         DATA 0xe4
0000            178   _SMOD1          DATA 0xe5
0000            179   _EIE1           DATA 0xe6
0000            180   _EIE2           DATA 0xe7
0000            181   _ADC0CN         DATA 0xe8
0000            182   _PCA0CPL1       DATA 0xe9
0000            183   _PCA0CPH1       DATA 0xea
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPH2       DATA 0xec
0000            186   _PCA0CPL3       DATA 0xed
0000            187   _PCA0CPH3       DATA 0xee
0000            188   _RSTSRC         DATA 0xef
0000            189   _B              DATA 0xf0
0000            190   _P0MDIN         DATA 0xf1
0000            191   _P1MDIN         DATA 0xf2
0000            192   _P2MDIN         DATA 0xf3
0000            193   _P3MDIN         DATA 0xf4
0000            194   _P4MDIN         DATA 0xf5
0000            195   _EIP1           DATA 0xf6
0000            196   _EIP2           DATA 0xf7
0000            197   _SPI0CN         DATA 0xf8
0000            198   _PCA0L          DATA 0xf9
0000            199   _PCA0H          DATA 0xfa
0000            200   _PCA0CPL0       DATA 0xfb
0000            201   _PCA0CPH0       DATA 0xfc
0000            202   _PCA0CPL4       DATA 0xfd
0000            203   _PCA0CPH4       DATA 0xfe
0000            204   _VDM0CN         DATA 0xff
0000            205   _DPTR           DATA 0x8382
0000            206   _TMR2RL         DATA 0xcbca
0000            207   _TMR3RL         DATA 0x9392
0000            208   _TMR4RL         DATA 0x9392
0000            209   _TMR5RL         DATA 0xcbca
0000            210   _TMR2           DATA 0xcdcc
0000            211   _TMR3           DATA 0x9594
0000            212   _TMR4           DATA 0x9594
0000            213   _TMR5           DATA 0xcdcc
0000            214   _SBRL1          DATA 0xb5b4
0000            215   _ADC0           DATA 0xbebd
0000            216   _ADC0GT         DATA 0xc4c3
0000            217   _ADC0LT         DATA 0xc6c5
0000            218   _PCA0           DATA 0xfaf9
0000            219   _PCA0CP1        DATA 0xeae9
0000            220   _PCA0CP2        DATA 0xeceb
0000            221   _PCA0CP3        DATA 0xeeed
0000            222   _PCA0CP0        DATA 0xfcfb
0000            223   _PCA0CP4        DATA 0xfefd
0000            224   ;--------------------------------------------------------
0000            225   ; special function bits
0000            226   ;--------------------------------------------------------
0000            227   _P0_0           BIT 0x80
0000            228   _P0_1           BIT 0x81
0000            229   _P0_2           BIT 0x82
0000            230   _P0_3           BIT 0x83
0000            231   _P0_4           BIT 0x84
0000            232   _P0_5           BIT 0x85
0000            233   _P0_6           BIT 0x86
0000            234   _P0_7           BIT 0x87
0000            235   _TF1            BIT 0x8f
0000            236   _TR1            BIT 0x8e
0000            237   _TF0            BIT 0x8d
0000            238   _TR0            BIT 0x8c
0000            239   _IE1            BIT 0x8b
0000            240   _IT1            BIT 0x8a
0000            241   _IE0            BIT 0x89
0000            242   _IT0            BIT 0x88
0000            243   _P1_0           BIT 0x90
0000            244   _P1_1           BIT 0x91
0000            245   _P1_2           BIT 0x92
0000            246   _P1_3           BIT 0x93
0000            247   _P1_4           BIT 0x94
0000            248   _P1_5           BIT 0x95
0000            249   _P1_6           BIT 0x96
0000            250   _P1_7           BIT 0x97
0000            251   _S0MODE         BIT 0x9f
0000            252   _SCON0_6        BIT 0x9e
0000            253   _MCE0           BIT 0x9d
0000            254   _REN0           BIT 0x9c
0000            255   _TB80           BIT 0x9b
0000            256   _RB80           BIT 0x9a
0000            257   _TI0            BIT 0x99
0000            258   _RI0            BIT 0x98
0000            259   _SCON_6         BIT 0x9e
0000            260   _MCE            BIT 0x9d
0000            261   _REN            BIT 0x9c
0000            262   _TB8            BIT 0x9b
0000            263   _RB8            BIT 0x9a
0000            264   _TI             BIT 0x99
0000            265   _RI             BIT 0x98
0000            266   _P2_0           BIT 0xa0
0000            267   _P2_1           BIT 0xa1
0000            268   _P2_2           BIT 0xa2
0000            269   _P2_3           BIT 0xa3
0000            270   _P2_4           BIT 0xa4
0000            271   _P2_5           BIT 0xa5
0000            272   _P2_6           BIT 0xa6
0000            273   _P2_7           BIT 0xa7
0000            274   _EA             BIT 0xaf
0000            275   _ESPI0          BIT 0xae
0000            276   _ET2            BIT 0xad
0000            277   _ES0            BIT 0xac
0000            278   _ET1            BIT 0xab
0000            279   _EX1            BIT 0xaa
0000            280   _ET0            BIT 0xa9
0000            281   _EX0            BIT 0xa8
0000            282   _P3_0           BIT 0xb0
0000            283   _P3_1           BIT 0xb1
0000            284   _P3_2           BIT 0xb2
0000            285   _P3_3           BIT 0xb3
0000            286   _P3_4           BIT 0xb4
0000            287   _P3_5           BIT 0xb5
0000            288   _P3_6           BIT 0xb6
0000            289   _P3_7           BIT 0xb7
0000            290   _IP_7           BIT 0xbf
0000            291   _PSPI0          BIT 0xbe
0000            292   _PT2            BIT 0xbd
0000            293   _PS0            BIT 0xbc
0000            294   _PT1            BIT 0xbb
0000            295   _PX1            BIT 0xba
0000            296   _PT0            BIT 0xb9
0000            297   _PX0            BIT 0xb8
0000            298   _MASTER0        BIT 0xc7
0000            299   _TXMODE0        BIT 0xc6
0000            300   _STA0           BIT 0xc5
0000            301   _STO0           BIT 0xc4
0000            302   _ACKRQ0         BIT 0xc3
0000            303   _ARBLOST0       BIT 0xc2
0000            304   _ACK0           BIT 0xc1
0000            305   _SI0            BIT 0xc0
0000            306   _MASTER1        BIT 0xc7
0000            307   _TXMODE1        BIT 0xc6
0000            308   _STA1           BIT 0xc5
0000            309   _STO1           BIT 0xc4
0000            310   _ACKRQ1         BIT 0xc3
0000            311   _ARBLOST1       BIT 0xc2
0000            312   _ACK1           BIT 0xc1
0000            313   _SI1            BIT 0xc0
0000            314   _TF2            BIT 0xcf
0000            315   _TF2H           BIT 0xcf
0000            316   _TF2L           BIT 0xce
0000            317   _TF2LEN         BIT 0xcd
0000            318   _TF2CEN         BIT 0xcc
0000            319   _T2SPLIT        BIT 0xcb
0000            320   _TR2            BIT 0xca
0000            321   _T2CSS          BIT 0xc9
0000            322   _T2XCLK         BIT 0xc8
0000            323   _TF5H           BIT 0xcf
0000            324   _TF5L           BIT 0xce
0000            325   _TF5LEN         BIT 0xcd
0000            326   _TMR5CN_4       BIT 0xcc
0000            327   _T5SPLIT        BIT 0xcb
0000            328   _TR5            BIT 0xca
0000            329   _TMR5CN_1       BIT 0xc9
0000            330   _T5XCLK         BIT 0xc8
0000            331   _CY             BIT 0xd7
0000            332   _AC             BIT 0xd6
0000            333   _F0             BIT 0xd5
0000            334   _RS1            BIT 0xd4
0000            335   _RS0            BIT 0xd3
0000            336   _OV             BIT 0xd2
0000            337   _F1             BIT 0xd1
0000            338   _PARITY         BIT 0xd0
0000            339   _CF             BIT 0xdf
0000            340   _CR             BIT 0xde
0000            341   _PCA0CN_5       BIT 0xde
0000            342   _CCF4           BIT 0xdc
0000            343   _CCF3           BIT 0xdb
0000            344   _CCF2           BIT 0xda
0000            345   _CCF1           BIT 0xd9
0000            346   _CCF0           BIT 0xd8
0000            347   _ACC_7          BIT 0xe7
0000            348   _ACC_6          BIT 0xe6
0000            349   _ACC_5          BIT 0xe5
0000            350   _ACC_4          BIT 0xe4
0000            351   _ACC_3          BIT 0xe3
0000            352   _ACC_2          BIT 0xe2
0000            353   _ACC_1          BIT 0xe1
0000            354   _ACC_0          BIT 0xe0
0000            355   _AD0EN          BIT 0xef
0000            356   _AD0TM          BIT 0xee
0000            357   _AD0INT         BIT 0xed
0000            358   _AD0BUSY        BIT 0xec
0000            359   _AD0WINT        BIT 0xeb
0000            360   _AD0CM2         BIT 0xea
0000            361   _AD0CM1         BIT 0xe9
0000            362   _AD0CM0         BIT 0xe8
0000            363   _B_7            BIT 0xf7
0000            364   _B_6            BIT 0xf6
0000            365   _B_5            BIT 0xf5
0000            366   _B_4            BIT 0xf4
0000            367   _B_3            BIT 0xf3
0000            368   _B_2            BIT 0xf2
0000            369   _B_1            BIT 0xf1
0000            370   _B_0            BIT 0xf0
0000            371   _SPIF           BIT 0xff
0000            372   _WCOL           BIT 0xfe
0000            373   _MODF           BIT 0xfd
0000            374   _RXOVRN         BIT 0xfc
0000            375   _NSSMD1         BIT 0xfb
0000            376   _NSSMD0         BIT 0xfa
0000            377   _TXBMT          BIT 0xf9
0000            378   _SPIEN          BIT 0xf8
0000            379   ;--------------------------------------------------------
0000            380   ; overlayable register banks
0000            381   ;--------------------------------------------------------
0000            382            rbank0 segment data overlay
0000            383   ;--------------------------------------------------------
0000            384   ; internal ram data
0000            385   ;--------------------------------------------------------
0000            386            rseg R_DSEG
0000            387   _pwm_count:
0000            388            ds 1
0001            389   _power:
0001            390            ds 1
0002            391   _pwm_BLU0:
0002            392            ds 1
0003            393   _pwm_BLU1:
0003            394            ds 1
0004            395   _pwm_RED0:
0004            396            ds 1
0005            397   _pwm_RED1:
0005            398            ds 1
0006            399   _dirout:
0006            400            ds 1
0007            401   _overflow_count:
0007            402            ds 1
0008            403   _frequency:
0008            404            ds 4
000C            405   _mode:
000C            406            ds 2
000E            407   _FreqBuffer:
000E            408            ds 16
001E            409   _WriteCount:
001E            410            ds 1
001F            411   _millisecond:
001F            412            ds 2
0021            413   _DetermineMode_ForwardSigCount_1_72:
0021            414            ds 1
0022            415   _DetermineMode_StopSigCount_1_72:
0022            416            ds 1
0023            417   _MotorControl_IndVolts_1_80:
0023            418            ds 3
0026            419   _MotorControl_sloc0_1_0:
0026            420            ds 3
0029            421   _MotorControl_sloc1_1_0:
0029            422            ds 4
002D            423   _MotorControl_sloc2_1_0:
002D            424            ds 4
0031            425   _main_IndVolts_1_96:
0031            426            ds 12
003D            427   ;--------------------------------------------------------
003D            428   ; overlayable items in internal ram 
003D            429   ;--------------------------------------------------------
0000            430            rseg    R_OSEG
0000            431            rseg    R_OSEG
0000            432   _InitPinADC_PARM_2:
0000            433            ds 1
0001            434            rseg    R_OSEG
0001            435   ;--------------------------------------------------------
0001            436   ; indirectly addressable internal ram data
0001            437   ;--------------------------------------------------------
0000            438            rseg R_ISEG
0000            439   ;--------------------------------------------------------
0000            440   ; absolute internal ram data
0000            441   ;--------------------------------------------------------
0000            442            DSEG
0000            443   ;--------------------------------------------------------
0000            444   ; bit data
0000            445   ;--------------------------------------------------------
0000            446            rseg R_BSEG
0000            447   _Timer2_ISR_sloc0_1_0:
0000            448            DBIT    1
0001            449   ;--------------------------------------------------------
0001            450   ; paged external ram data
0001            451   ;--------------------------------------------------------
0000            452            rseg R_PSEG
0000            453   ;--------------------------------------------------------
0000            454   ; external ram data
0000            455   ;--------------------------------------------------------
0000            456            rseg R_XSEG
0000            457   ;--------------------------------------------------------
0000            458   ; absolute external ram data
0000            459   ;--------------------------------------------------------
0000            460            XSEG
0000            461   ;--------------------------------------------------------
0000            462   ; external initialized ram data
0000            463   ;--------------------------------------------------------
0000            464            rseg R_IXSEG
0000            465            rseg R_HOME
0000            466            rseg R_GSINIT
0000            467            rseg R_CSEG
0000            468   ;--------------------------------------------------------
0000            469   ; Reset entry point and interrupt vectors
0000            470   ;--------------------------------------------------------
0000            471            CSEG at 0x0000
0000 020100     472            ljmp    _crt0
002B            473            CSEG at 0x002b
002B 020100     474            ljmp    _Timer2_ISR
002E            475   ;--------------------------------------------------------
002E            476   ; global & static initialisations
002E            477   ;--------------------------------------------------------
0000            478            rseg R_HOME
0000            479            rseg R_GSINIT
0000            480            rseg R_GSINIT
0000            481   ;--------------------------------------------------------
0000            482   ; data variables initialization
0000            483   ;--------------------------------------------------------
0000            484            rseg R_DINIT
0000            485   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:48: volatile unsigned char pwm_count=0;
0000 756000     486            mov     _pwm_count,#0x00
0003            487   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:49: volatile unsigned char power=30;
0003 75201E     488            mov     _power,#0x1E
0006            489   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:50: volatile unsigned char pwm_BLU0=0;
0006 75E000     490            mov     _pwm_BLU0,#0x00
0009            491   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:51: volatile unsigned char pwm_BLU1=0;
0009 75A000     492            mov     _pwm_BLU1,#0x00
000C            493   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:52: volatile unsigned char pwm_RED0=0;
000C 756000     494            mov     _pwm_RED0,#0x00
000F            495   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:53: volatile unsigned char pwm_RED1=0;
000F 752000     496            mov     _pwm_RED1,#0x00
0012            497   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:54: volatile unsigned char dirout=0;
0012 75E000     498            mov     _dirout,#0x00
0015            499   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:55: volatile unsigned char overflow_count=0;
0015 75A000     500            mov     _overflow_count,#0x00
0018            501   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:56: volatile float frequency=0;
0018 756000     502            mov     _frequency,#0x00
001B 756100     503            mov     (_frequency + 1),#0x00
001E 756200     504            mov     (_frequency + 2),#0x00
0021 756300     505            mov     (_frequency + 3),#0x00
0024            506   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:57: unsigned int mode=STOP;
0024 E4         507            clr     a
0025 F520       508            mov     _mode,a
0027 F521       509            mov     (_mode + 1),a
0029            510   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:58: volatile float FreqBuffer[4]={0,0,0,0};
0029 75E000     511            mov     _FreqBuffer,#0x00
002C 75E100     512            mov     (_FreqBuffer + 1),#0x00
002F 75E200     513            mov     (_FreqBuffer + 2),#0x00
0032 75E300     514            mov     (_FreqBuffer + 3),#0x00
0035 75E400     515            mov     (_FreqBuffer + 0x0004),#0x00
0038 75E500     516            mov     ((_FreqBuffer + 0x0004) + 1),#0x00
003B 75E600     517            mov     ((_FreqBuffer + 0x0004) + 2),#0x00
003E 75E700     518            mov     ((_FreqBuffer + 0x0004) + 3),#0x00
0041 75E800     519            mov     (_FreqBuffer + 0x0008),#0x00
0044 75E900     520            mov     ((_FreqBuffer + 0x0008) + 1),#0x00
0047 75EA00     521            mov     ((_FreqBuffer + 0x0008) + 2),#0x00
004A 75EB00     522            mov     ((_FreqBuffer + 0x0008) + 3),#0x00
004D 75EC00     523            mov     (_FreqBuffer + 0x000c),#0x00
0050 75ED00     524            mov     ((_FreqBuffer + 0x000c) + 1),#0x00
0053 75EE00     525            mov     ((_FreqBuffer + 0x000c) + 2),#0x00
0056 75EF00     526            mov     ((_FreqBuffer + 0x000c) + 3),#0x00
0059            527   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:59: unsigned char WriteCount = 0;
0059 75A000     528            mov     _WriteCount,#0x00
005C            529   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:60: unsigned int millisecond=0;
005C E4         530            clr     a
005D F560       531            mov     _millisecond,a
005F F561       532            mov     (_millisecond + 1),a
0061            533            ; The linker places a 'ret' at the end of segment R_DINIT.
0061            534   ;--------------------------------------------------------
0061            535   ; code
0061            536   ;--------------------------------------------------------
0000            537            rseg R_CSEG
0000            538   ;------------------------------------------------------------
0000            539   ;Allocation info for local variables in function '_c51_external_startup'
0000            540   ;------------------------------------------------------------
0000            541   ;------------------------------------------------------------
0000            542   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:66: char _c51_external_startup (void)
0000            543   ;        -----------------------------------------
0000            544   ;         function _c51_external_startup
0000            545   ;        -----------------------------------------
0000            546   __c51_external_startup:
0000            547            using   0
0000            548   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:68: PCA0MD&=(~0x40) ;    // DISABLE WDT: clear Watchdog Enable bit
0000 53D9BF     549            anl     _PCA0MD,#0xBF
0003            550   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:69: VDM0CN=0x80; // enable VDD monitor
0003 75FF80     551            mov     _VDM0CN,#0x80
0006            552   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:70: RSTSRC=0x02|0x04; // Enable reset on missing clock detector and VDD
0006 75EF06     553            mov     _RSTSRC,#0x06
0009            554   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:78: CLKSEL|=0b_0000_0011; // SYSCLK derived from the Internal High-Frequency Oscillator / 1.
0009 43A903     555            orl     _CLKSEL,#0x03
000C            556   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:82: OSCICN |= 0x03; // Configure internal oscillator for its maximum frequency
000C 43B203     557            orl     _OSCICN,#0x03
000F            558   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:85: SCON0 = 0x10;
000F 759810     559            mov     _SCON0,#0x10
0012            560   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:87: TH1 = 0x10000-((SYSCLK/BAUDRATE)/2L);
0012 758D30     561            mov     _TH1,#0x30
0015            562   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:88: CKCON &= ~0x0B;                  // T1M = 1; SCA1:0 = xx
0015 538EF4     563            anl     _CKCON,#0xF4
0018            564   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:89: CKCON |=  0x08;
0018 438E08     565            orl     _CKCON,#0x08
001B            566   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:102: TL1 = TH1;      // Init Timer1
001B 858D8B     567            mov     _TL1,_TH1
001E            568   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:103: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit autoreload
001E 53890F     569            anl     _TMOD,#0x0F
0021            570   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:104: TMOD |=  0x20;
0021 438920     571            orl     _TMOD,#0x20
0024            572   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:105: TR1 = 1; // START Timer1
0024 D28E       573            setb    _TR1
0026            574   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:106: TI = 1;  // Indicate TX0 ready
0026 D299       575            setb    _TI
0028            576   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:109: P2MDOUT|=0b_0000_0011;
0028 43A603     577            orl     _P2MDOUT,#0x03
002B            578   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:110: P0MDOUT |= 0x01;  // set P0.0 and P0.4 as push-pull outputs
002B 43A401     579            orl     _P0MDOUT,#0x01
002E            580   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:111: XBR0     = 0x01; // Enable UART on P0.4(TX) and P0.5(RX)
002E 75E101     581            mov     _XBR0,#0x01
0031            582   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:112: XBR1     = 0x40; // Enable crossbar and weak pull-ups
0031 75E240     583            mov     _XBR1,#0x40
0034            584   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:114: return 0;
0034 758200     585            mov     dpl,#0x00
0037 22         586            ret
0038            587   ;------------------------------------------------------------
0038            588   ;Allocation info for local variables in function 'Timer3us'
0038            589   ;------------------------------------------------------------
0038            590   ;us                        Allocated to registers r2 
0038            591   ;i                         Allocated to registers r3 
0038            592   ;------------------------------------------------------------
0038            593   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:121: void Timer3us(unsigned char us)
0038            594   ;        -----------------------------------------
0038            595   ;         function Timer3us
0038            596   ;        -----------------------------------------
0038            597   _Timer3us:
0038 AA82       598            mov     r2,dpl
003A            599   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:126: CKCON|=0b_0100_0000;
003A 438E40     600            orl     _CKCON,#0x40
003D            601   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:128: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
003D 7592D0     602            mov     _TMR3RL,#0xD0
0040 7593FF     603            mov     (_TMR3RL >> 8),#0xFF
0043            604   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:129: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0043 859294     605            mov     _TMR3,_TMR3RL
0046 859395     606            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0049            607   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:131: TMR3CN = 0x04;                 // Sart Timer3 and clear overflow flag
0049 759104     608            mov     _TMR3CN,#0x04
004C            609   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:132: for (i = 0; i < us; i++)       // Count <us> overflows
004C 7B00       610            mov     r3,#0x00
004E            611   L003004?:
004E C3         612            clr     c
004F EB         613            mov     a,r3
0050 9A         614            subb    a,r2
0051 5001       615            jnc     L003007?
0053            616   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:134: while (!(TMR3CN & 0x80));  // Wait for overflow
0053            617   L003001?:
0053 E591       618            mov     a,_TMR3CN
0055 30E728     619            jnb     acc.7,L003001?
0058            620   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:135: TMR3CN &= ~(0x80);         // Clear overflow indicator
0058 53917F     621            anl     _TMR3CN,#0x7F
005B            622   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:132: for (i = 0; i < us; i++)       // Count <us> overflows
005B 0B         623            inc     r3
005C 8001       624            sjmp    L003004?
005E            625   L003007?:
005E            626   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:137: TMR3CN = 0 ;                   // Stop Timer3 and clear overflow flag
005E 759100     627            mov     _TMR3CN,#0x00
0061 22         628            ret
0062            629   ;------------------------------------------------------------
0062            630   ;Allocation info for local variables in function 'waitms'
0062            631   ;------------------------------------------------------------
0062            632   ;ms                        Allocated to registers r2 r3 
0062            633   ;j                         Allocated to registers r2 r3 
0062            634   ;------------------------------------------------------------
0062            635   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:144: void waitms (unsigned int ms)
0062            636   ;        -----------------------------------------
0062            637   ;         function waitms
0062            638   ;        -----------------------------------------
0062            639   _waitms:
0062 AA82       640            mov     r2,dpl
0064 AB83       641            mov     r3,dph
0066            642   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:147: for(j=ms; j!=0; j--)
0066            643   L004001?:
0066 BA0028     644            cjne    r2,#0x00,L004010?
0069 BB0028     645            cjne    r3,#0x00,L004010?
006C 22         646            ret
006D            647   L004010?:
006D            648   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:149: Timer3us(249);
006D 7582F9     649            mov     dpl,#0xF9
0070 C002       650            push    ar2
0072 C003       651            push    ar3
0074 120100     652            lcall   _Timer3us
0077            653   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:150: Timer3us(249);
0077 7582F9     654            mov     dpl,#0xF9
007A 120100     655            lcall   _Timer3us
007D            656   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:151: Timer3us(249);
007D 7582F9     657            mov     dpl,#0xF9
0080 120100     658            lcall   _Timer3us
0083            659   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:152: Timer3us(250);
0083 7582FA     660            mov     dpl,#0xFA
0086 120100     661            lcall   _Timer3us
0089 D003       662            pop     ar3
008B D002       663            pop     ar2
008D            664   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:147: for(j=ms; j!=0; j--)
008D 1A         665            dec     r2
008E BAFF68     666            cjne    r2,#0xff,L004011?
0091 1B         667            dec     r3
0092            668   L004011?:
0092 8001       669            sjmp    L004001?
0094            670   ;------------------------------------------------------------
0094            671   ;Allocation info for local variables in function 'TIMER0_Init'
0094            672   ;------------------------------------------------------------
0094            673   ;------------------------------------------------------------
0094            674   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:158: void TIMER0_Init(void)
0094            675   ;        -----------------------------------------
0094            676   ;         function TIMER0_Init
0094            677   ;        -----------------------------------------
0094            678   _TIMER0_Init:
0094            679   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:160: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
0094 5389F0     680            anl     _TMOD,#0xF0
0097            681   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:161: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0097 438901     682            orl     _TMOD,#0x01
009A            683   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:162: TR0=0; // Stop Timer/Counter 0
009A C28C       684            clr     _TR0
009C 22         685            ret
009D            686   ;------------------------------------------------------------
009D            687   ;Allocation info for local variables in function 'TIMER2_Init'
009D            688   ;------------------------------------------------------------
009D            689   ;------------------------------------------------------------
009D            690   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:168: void TIMER2_Init(void)
009D            691   ;        -----------------------------------------
009D            692   ;         function TIMER2_Init
009D            693   ;        -----------------------------------------
009D            694   _TIMER2_Init:
009D            695   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:170: TMR2CN=0x00;   // Stop Timer2; Clear TF2;
009D 75C800     696            mov     _TMR2CN,#0x00
00A0            697   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:171: CKCON|=0b_0001_0000;
00A0 438E10     698            orl     _CKCON,#0x10
00A3            699   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:172: TMR2RL=(-(SYSCLK/(2*48))/(100L)); // Initialize reload value
00A3 75CA78     700            mov     _TMR2RL,#0x78
00A6 75CBEC     701            mov     (_TMR2RL >> 8),#0xEC
00A9            702   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:173: TMR2=0xffff;   // Set to reload immediately
00A9 75CCFF     703            mov     _TMR2,#0xFF
00AC 75CDFF     704            mov     (_TMR2 >> 8),#0xFF
00AF            705   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:174: ET2=1;         // Enable Timer2 interrupts
00AF D2AD       706            setb    _ET2
00B1            707   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:175: TR2=1;         // Start Timer2
00B1 D2CA       708            setb    _TR2
00B3 22         709            ret
00B4            710   ;------------------------------------------------------------
00B4            711   ;Allocation info for local variables in function 'InitADC'
00B4            712   ;------------------------------------------------------------
00B4            713   ;------------------------------------------------------------
00B4            714   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:181: void InitADC (void)
00B4            715   ;        -----------------------------------------
00B4            716   ;         function InitADC
00B4            717   ;        -----------------------------------------
00B4            718   _InitADC:
00B4            719   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:184: ADC0CF = 0xF8; // SAR clock = 31, Right-justified result
00B4 75BCF8     720            mov     _ADC0CF,#0xF8
00B7            721   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:185: ADC0CN = 0b_1000_0000; // AD0EN=1, AD0TM=0
00B7 75E880     722            mov     _ADC0CN,#0x80
00BA            723   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:186: REF0CN = 0b_0000_1000; //Select VDD as the voltage reference for the converter
00BA 75D108     724            mov     _REF0CN,#0x08
00BD 22         725            ret
00BE            726   ;------------------------------------------------------------
00BE            727   ;Allocation info for local variables in function 'InitPinADC'
00BE            728   ;------------------------------------------------------------
00BE            729   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00BE            730   ;portno                    Allocated to registers r2 
00BE            731   ;mask                      Allocated to registers r3 
00BE            732   ;------------------------------------------------------------
00BE            733   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:193: void InitPinADC (unsigned char portno, unsigned char pinno)
00BE            734   ;        -----------------------------------------
00BE            735   ;         function InitPinADC
00BE            736   ;        -----------------------------------------
00BE            737   _InitPinADC:
00BE AA82       738            mov     r2,dpl
00C0            739   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:197: mask=1<<pinno;
00C0 8550F0     740            mov     b,_InitPinADC_PARM_2
00C3 05F0       741            inc     b
00C5 7401       742            mov     a,#0x01
00C7 8001       743            sjmp    L008012?
00C9            744   L008010?:
00C9 25E0       745            add     a,acc
00CB            746   L008012?:
00CB D5F028     747            djnz    b,L008010?
00CE FB         748            mov     r3,a
00CF            749   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:199: switch (portno)
00CF EA         750            mov     a,r2
00D0 24FC       751            add     a,#0xff - 0x03
00D2 4001       752            jc      L008007?
00D4 EA         753            mov     a,r2
00D5 2A         754            add     a,r2
00D6 2A         755            add     a,r2
00D7 909FA8     756            mov     dptr,#L008014?
00DA 73         757            jmp     @a+dptr
00DB            758   L008014?:
00DB 020100     759            ljmp    L008001?
00DE 020100     760            ljmp    L008002?
00E1 020100     761            ljmp    L008003?
00E4 020100     762            ljmp    L008004?
00E7            763   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:201: case 0:
00E7            764   L008001?:
00E7            765   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:202: P0MDIN &= (~mask); // Set pin as analog input
00E7 EB         766            mov     a,r3
00E8 F4         767            cpl     a
00E9 52F1       768            anl     _P0MDIN,a
00EB            769   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:203: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00EB EB         770            mov     a,r3
00EC 42D4       771            orl     _P0SKIP,a
00EE            772   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:204: break;
00EE            773   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:205: case 1:
00EE 22         774            ret
00EF            775   L008002?:
00EF            776   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:206: P1MDIN &= (~mask); // Set pin as analog input
00EF EB         777            mov     a,r3
00F0 F4         778            cpl     a
00F1 52F2       779            anl     _P1MDIN,a
00F3            780   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:207: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00F3 EB         781            mov     a,r3
00F4 42D5       782            orl     _P1SKIP,a
00F6            783   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:208: break;
00F6            784   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:209: case 2:
00F6 22         785            ret
00F7            786   L008003?:
00F7            787   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:210: P2MDIN &= (~mask); // Set pin as analog input
00F7 EB         788            mov     a,r3
00F8 F4         789            cpl     a
00F9 52F3       790            anl     _P2MDIN,a
00FB            791   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:211: P2SKIP |= mask; // Skip Crossbar decoding for this pin
00FB EB         792            mov     a,r3
00FC 42D6       793            orl     _P2SKIP,a
00FE            794   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:212: break;
00FE            795   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:213: case 3:
00FE 22         796            ret
00FF            797   L008004?:
00FF            798   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:214: P3MDIN &= (~mask); // Set pin as analog input
00FF EB         799            mov     a,r3
0100 F4         800            cpl     a
0101 FA         801            mov     r2,a
0102 52F4       802            anl     _P3MDIN,a
0104            803   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:215: P3SKIP |= mask; // Skip Crossbar decoding for this pin
0104 EB         804            mov     a,r3
0105 42DF       805            orl     _P3SKIP,a
0107            806   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:219: }
0107            807   L008007?:
0107 22         808            ret
0108            809   ;------------------------------------------------------------
0108            810   ;Allocation info for local variables in function 'ADC_at_Pin'
0108            811   ;------------------------------------------------------------
0108            812   ;pin                       Allocated to registers 
0108            813   ;------------------------------------------------------------
0108            814   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:226: unsigned int ADC_at_Pin(unsigned char pin)
0108            815   ;        -----------------------------------------
0108            816   ;         function ADC_at_Pin
0108            817   ;        -----------------------------------------
0108            818   _ADC_at_Pin:
0108 8582BB     819            mov     _AMX0P,dpl
010B            820   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:229: AMX0N = LQFP32_MUX_GND;  // GND is negative input (Single-ended Mode)
010B 75BA1F     821            mov     _AMX0N,#0x1F
010E            822   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:231: AD0BUSY=1;
010E D2EC       823            setb    _AD0BUSY
0110            824   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:232: while (AD0BUSY); // Wait for dummy conversion to finish
0110            825   L009001?:
0110 20ECE8     826            jb      _AD0BUSY,L009001?
0113            827   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:234: AD0BUSY = 1;
0113 D2EC       828            setb    _AD0BUSY
0115            829   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:235: while (AD0BUSY); // Wait for conversion to complete
0115            830   L009004?:
0115 20EC28     831            jb      _AD0BUSY,L009004?
0118            832   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:236: return (ADC0L+(ADC0H*0x100));
0118 AABD       833            mov     r2,_ADC0L
011A 7B00       834            mov     r3,#0x00
011C ADBE       835            mov     r5,_ADC0H
011E 7C00       836            mov     r4,#0x00
0120 EC         837            mov     a,r4
0121 2A         838            add     a,r2
0122 F582       839            mov     dpl,a
0124 ED         840            mov     a,r5
0125 3B         841            addc    a,r3
0126 F583       842            mov     dph,a
0128 22         843            ret
0129            844   ;------------------------------------------------------------
0129            845   ;Allocation info for local variables in function 'Volts_at_Pin'
0129            846   ;------------------------------------------------------------
0129            847   ;pin                       Allocated to registers r2 
0129            848   ;------------------------------------------------------------
0129            849   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:243: float Volts_at_Pin(unsigned char pin)
0129            850   ;        -----------------------------------------
0129            851   ;         function Volts_at_Pin
0129            852   ;        -----------------------------------------
0129            853   _Volts_at_Pin:
0129            854   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:245: return ((ADC_at_Pin(pin)*VDD_onboard)/1024.0);
0129 120100     855            lcall   _ADC_at_Pin
012C 120100     856            lcall   ___uint2fs
012F AA82       857            mov     r2,dpl
0131 AB83       858            mov     r3,dph
0133 ACF0       859            mov     r4,b
0135 FD         860            mov     r5,a
0136 C002       861            push    ar2
0138 C003       862            push    ar3
013A C004       863            push    ar4
013C C005       864            push    ar5
013E 90DD2F     865            mov     dptr,#0xDD2F
0141 75F054     866            mov     b,#0x54
0144 7440       867            mov     a,#0x40
0146 120100     868            lcall   ___fsmul
0149 AA82       869            mov     r2,dpl
014B AB83       870            mov     r3,dph
014D ACF0       871            mov     r4,b
014F FD         872            mov     r5,a
0150 E581       873            mov     a,sp
0152 24FC       874            add     a,#0xfc
0154 F581       875            mov     sp,a
0156 E4         876            clr     a
0157 C0E0       877            push    acc
0159 C0E0       878            push    acc
015B 7480       879            mov     a,#0x80
015D C0E0       880            push    acc
015F 7444       881            mov     a,#0x44
0161 C0E0       882            push    acc
0163 8A82       883            mov     dpl,r2
0165 8B83       884            mov     dph,r3
0167 8CF0       885            mov     b,r4
0169 ED         886            mov     a,r5
016A 120100     887            lcall   ___fsdiv
016D AA82       888            mov     r2,dpl
016F AB83       889            mov     r3,dph
0171 ACF0       890            mov     r4,b
0173 FD         891            mov     r5,a
0174 E581       892            mov     a,sp
0176 24FC       893            add     a,#0xfc
0178 F581       894            mov     sp,a
017A 8A82       895            mov     dpl,r2
017C 8B83       896            mov     dph,r3
017E 8CF0       897            mov     b,r4
0180 ED         898            mov     a,r5
0181 22         899            ret
0182            900   ;------------------------------------------------------------
0182            901   ;Allocation info for local variables in function 'Timer2_ISR'
0182            902   ;------------------------------------------------------------
0182            903   ;------------------------------------------------------------
0182            904   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:252: void Timer2_ISR (void) interrupt 5
0182            905   ;        -----------------------------------------
0182            906   ;         function Timer2_ISR
0182            907   ;        -----------------------------------------
0182            908   _Timer2_ISR:
0182 C0E0       909            push    acc
0184 C0D0       910            push    psw
0186 75D000     911            mov     psw,#0x00
0189            912   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:254: TF2H = 0; // Clear Timer2 interrupt flag
0189 C2CF       913            clr     _TF2H
018B            914   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:256: pwm_count++;
018B 0560       915            inc     _pwm_count
018D            916   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:257: if(pwm_count>100) pwm_count=0;
018D E560       917            mov     a,_pwm_count
018F 249B       918            add     a,#0xff - 0x64
0191 5001       919            jnc     L011002?
0193 756000     920            mov     _pwm_count,#0x00
0196            921   L011002?:
0196            922   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:259: BLU0=pwm_count>pwm_BLU0?0:1;
0196 C3         923            clr     c
0197 E5E0       924            mov     a,_pwm_BLU0
0199 9560       925            subb    a,_pwm_count
019B 92E8       926            mov  _Timer2_ISR_sloc0_1_0,c
019D B3         927            cpl     c
019E 92A5       928            mov     _P2_5,c
01A0            929   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:260: BLU1=pwm_count>pwm_BLU1?0:1;
01A0 C3         930            clr     c
01A1 E5A0       931            mov     a,_pwm_BLU1
01A3 9560       932            subb    a,_pwm_count
01A5 92E8       933            mov  _Timer2_ISR_sloc0_1_0,c
01A7 B3         934            cpl     c
01A8 92A2       935            mov     _P2_2,c
01AA            936   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:262: RED0=pwm_count>pwm_RED0?0:1;
01AA C3         937            clr     c
01AB E560       938            mov     a,_pwm_RED0
01AD 9560       939            subb    a,_pwm_count
01AF 92E8       940            mov  _Timer2_ISR_sloc0_1_0,c
01B1 B3         941            cpl     c
01B2 92A3       942            mov     _P2_3,c
01B4            943   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:263: RED1=pwm_count>pwm_RED1?0:1;
01B4 C3         944            clr     c
01B5 E520       945            mov     a,_pwm_RED1
01B7 9560       946            subb    a,_pwm_count
01B9 92E8       947            mov  _Timer2_ISR_sloc0_1_0,c
01BB B3         948            cpl     c
01BC 92A4       949            mov     _P2_4,c
01BE D0D0       950            pop     psw
01C0 D0E0       951            pop     acc
01C2 32         952            reti
01C3            953   ;        eliminated unneeded push/pop dpl
01C3            954   ;        eliminated unneeded push/pop dph
01C3            955   ;        eliminated unneeded push/pop b
01C3            956   ;------------------------------------------------------------
01C3            957   ;Allocation info for local variables in function 'ReadFrequency'
01C3            958   ;------------------------------------------------------------
01C3            959   ;------------------------------------------------------------
01C3            960   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:270: void ReadFrequency (void)
01C3            961   ;        -----------------------------------------
01C3            962   ;         function ReadFrequency
01C3            963   ;        -----------------------------------------
01C3            964   _ReadFrequency:
01C3            965   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:274: TL0=0;
01C3 758A00     966            mov     _TL0,#0x00
01C6            967   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:275: TH0=0;
01C6 758C00     968            mov     _TH0,#0x00
01C9            969   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:276: TF0=0;
01C9 C28D       970            clr     _TF0
01CB            971   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:277: overflow_count=0;
01CB 75A000     972            mov     _overflow_count,#0x00
01CE            973   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:279: while(FRQIN!=0); // Wait for the signal to be zero
01CE            974   L012001?:
01CE 2096E8     975            jb      _P1_6,L012001?
01D1            976   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:280: while(FRQIN!=1); // Wait for the signal to be one
01D1            977   L012004?:
01D1 309628     978            jnb     _P1_6,L012004?
01D4            979   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:281: TR0=1; // Start the timer
01D4 D28C       980            setb    _TR0
01D6            981   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:282: while(FRQIN!=0) // Wait for the signal to be zero
01D6            982   L012009?:
01D6 3096A8     983            jnb     _P1_6,L012014?
01D9            984   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:284: if(TF0==1) // Did the 16-bit timer overflow?
01D9            985   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:286: TF0=0;
01D9 108DE8     986            jbc     _TF0,L012031?
01DC 8001       987            sjmp    L012009?
01DE            988   L012031?:
01DE            989   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:287: overflow_count++;
01DE 05A0       990            inc     _overflow_count
01E0            991   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:290: while(FRQIN!=1) // Wait for the signal to be one
01E0 8001       992            sjmp    L012009?
01E2            993   L012014?:
01E2 209628     994            jb      _P1_6,L012016?
01E5            995   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:292: if(TF0==1) // Did the 16-bit timer overflow?
01E5            996   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:294: TF0=0;
01E5 108D68     997            jbc     _TF0,L012033?
01E8 8001       998            sjmp    L012014?
01EA            999   L012033?:
01EA           1000   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:295: overflow_count++;
01EA 05A0      1001            inc     _overflow_count
01EC 8001      1002            sjmp    L012014?
01EE           1003   L012016?:
01EE           1004   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:299: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period. Then convert it to frequency
01EE C28C      1005            clr     _TR0
01F0           1006   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:301: frequency=1.0/((overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK)); // Compute frequency
01F0 85A082    1007            mov     dpl,_overflow_count
01F3 120100    1008            lcall   ___uchar2fs
01F6 AA82      1009            mov     r2,dpl
01F8 AB83      1010            mov     r3,dph
01FA ACF0      1011            mov     r4,b
01FC FD        1012            mov     r5,a
01FD C002      1013            push    ar2
01FF C003      1014            push    ar3
0201 C004      1015            push    ar4
0203 C005      1016            push    ar5
0205 900000    1017            mov     dptr,#0x0000
0208 75F080    1018            mov     b,#0x80
020B 7447      1019            mov     a,#0x47
020D 120100    1020            lcall   ___fsmul
0210 AA82      1021            mov     r2,dpl
0212 AB83      1022            mov     r3,dph
0214 ACF0      1023            mov     r4,b
0216 FD        1024            mov     r5,a
0217 E581      1025            mov     a,sp
0219 24FC      1026            add     a,#0xfc
021B F581      1027            mov     sp,a
021D 858C82    1028            mov     dpl,_TH0
0220 C002      1029            push    ar2
0222 C003      1030            push    ar3
0224 C004      1031            push    ar4
0226 C005      1032            push    ar5
0228 120100    1033            lcall   ___uchar2fs
022B AE82      1034            mov     r6,dpl
022D AF83      1035            mov     r7,dph
022F A8F0      1036            mov     r0,b
0231 F9        1037            mov     r1,a
0232 C006      1038            push    ar6
0234 C007      1039            push    ar7
0236 C000      1040            push    ar0
0238 C001      1041            push    ar1
023A 900000    1042            mov     dptr,#0x0000
023D 75F080    1043            mov     b,#0x80
0240 7443      1044            mov     a,#0x43
0242 120100    1045            lcall   ___fsmul
0245 AE82      1046            mov     r6,dpl
0247 AF83      1047            mov     r7,dph
0249 A8F0      1048            mov     r0,b
024B F9        1049            mov     r1,a
024C E581      1050            mov     a,sp
024E 24FC      1051            add     a,#0xfc
0250 F581      1052            mov     sp,a
0252 D005      1053            pop     ar5
0254 D004      1054            pop     ar4
0256 D003      1055            pop     ar3
0258 D002      1056            pop     ar2
025A C006      1057            push    ar6
025C C007      1058            push    ar7
025E C000      1059            push    ar0
0260 C001      1060            push    ar1
0262 8A82      1061            mov     dpl,r2
0264 8B83      1062            mov     dph,r3
0266 8CF0      1063            mov     b,r4
0268 ED        1064            mov     a,r5
0269 120100    1065            lcall   ___fsadd
026C AA82      1066            mov     r2,dpl
026E AB83      1067            mov     r3,dph
0270 ACF0      1068            mov     r4,b
0272 FD        1069            mov     r5,a
0273 E581      1070            mov     a,sp
0275 24FC      1071            add     a,#0xfc
0277 F581      1072            mov     sp,a
0279 AE8A      1073            mov     r6,_TL0
027B 7F00      1074            mov     r7,#0x00
027D 8E82      1075            mov     dpl,r6
027F 8F83      1076            mov     dph,r7
0281 C002      1077            push    ar2
0283 C003      1078            push    ar3
0285 C004      1079            push    ar4
0287 C005      1080            push    ar5
0289 120100    1081            lcall   ___sint2fs
028C AE82      1082            mov     r6,dpl
028E AF83      1083            mov     r7,dph
0290 A8F0      1084            mov     r0,b
0292 F9        1085            mov     r1,a
0293 D005      1086            pop     ar5
0295 D004      1087            pop     ar4
0297 D003      1088            pop     ar3
0299 D002      1089            pop     ar2
029B C006      1090            push    ar6
029D C007      1091            push    ar7
029F C000      1092            push    ar0
02A1 C001      1093            push    ar1
02A3 8A82      1094            mov     dpl,r2
02A5 8B83      1095            mov     dph,r3
02A7 8CF0      1096            mov     b,r4
02A9 ED        1097            mov     a,r5
02AA 120100    1098            lcall   ___fsadd
02AD AA82      1099            mov     r2,dpl
02AF AB83      1100            mov     r3,dph
02B1 ACF0      1101            mov     r4,b
02B3 FD        1102            mov     r5,a
02B4 E581      1103            mov     a,sp
02B6 24FC      1104            add     a,#0xfc
02B8 F581      1105            mov     sp,a
02BA C002      1106            push    ar2
02BC C003      1107            push    ar3
02BE C004      1108            push    ar4
02C0 C005      1109            push    ar5
02C2 9037BD    1110            mov     dptr,#0x37BD
02C5 75F086    1111            mov     b,#0x86
02C8 7434      1112            mov     a,#0x34
02CA 120100    1113            lcall   ___fsmul
02CD AA82      1114            mov     r2,dpl
02CF AB83      1115            mov     r3,dph
02D1 ACF0      1116            mov     r4,b
02D3 FD        1117            mov     r5,a
02D4 E581      1118            mov     a,sp
02D6 24FC      1119            add     a,#0xfc
02D8 F581      1120            mov     sp,a
02DA C002      1121            push    ar2
02DC C003      1122            push    ar3
02DE C004      1123            push    ar4
02E0 C005      1124            push    ar5
02E2 900000    1125            mov     dptr,#0x0000
02E5 75F080    1126            mov     b,#0x80
02E8 743F      1127            mov     a,#0x3F
02EA 120100    1128            lcall   ___fsdiv
02ED 858260    1129            mov     _frequency,dpl
02F0 858361    1130            mov     (_frequency + 1),dph
02F3 85F062    1131            mov     (_frequency + 2),b
02F6 F563      1132            mov     (_frequency + 3),a
02F8 E581      1133            mov     a,sp
02FA 24FC      1134            add     a,#0xfc
02FC F581      1135            mov     sp,a
02FE 22        1136            ret
02FF           1137   ;------------------------------------------------------------
02FF           1138   ;Allocation info for local variables in function 'DetermineMode'
02FF           1139   ;------------------------------------------------------------
02FF           1140   ;ReadCount                 Allocated to registers r4 
02FF           1141   ;ForwardSigCount           Allocated with name '_DetermineMode_ForwardSigCount_1_72'
02FF           1142   ;StopSigCount              Allocated with name '_DetermineMode_StopSigCount_1_72'
02FF           1143   ;------------------------------------------------------------
02FF           1144   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:307: void DetermineMode (void) {
02FF           1145   ;        -----------------------------------------
02FF           1146   ;         function DetermineMode
02FF           1147   ;        -----------------------------------------
02FF           1148   _DetermineMode:
02FF           1149   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:311: ReadFrequency();
02FF 120100    1150            lcall   _ReadFrequency
0302           1151   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:315: FreqBuffer[WriteCount]=frequency;
0302 E5A0      1152            mov     a,_WriteCount
0304 25A0      1153            add     a,_WriteCount
0306 25E0      1154            add     a,acc
0308 FA        1155            mov     r2,a
0309 24E0      1156            add     a,#_FreqBuffer
030B F8        1157            mov     r0,a
030C A660      1158            mov     @r0,_frequency
030E 08        1159            inc     r0
030F A661      1160            mov     @r0,(_frequency + 1)
0311 08        1161            inc     r0
0312 A662      1162            mov     @r0,(_frequency + 2)
0314 08        1163            inc     r0
0315 A663      1164            mov     @r0,(_frequency + 3)
0317           1165   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:316: WriteCount++;
0317 05A0      1166            inc     _WriteCount
0319           1167   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:317: if (WriteCount==4){
0319 7404      1168            mov     a,#0x04
031B B5A068    1169            cjne    a,_WriteCount,L013029?
031E           1170   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:318: WriteCount=0;
031E 75A000    1171            mov     _WriteCount,#0x00
0321           1172   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:323: for (ReadCount=0; ReadCount<4; ReadCount++){
0321           1173   L013029?:
0321 75A800    1174            mov     _DetermineMode_ForwardSigCount_1_72,#0x00
0324 750800    1175            mov     _DetermineMode_StopSigCount_1_72,#0x00
0327 7C00      1176            mov     r4,#0x00
0329           1177   L013017?:
0329 BC04E8    1178            cjne    r4,#0x04,L013037?
032C           1179   L013037?:
032C 4001      1180            jc      L013038?
032E 020100    1181            ljmp    L013020?
0331           1182   L013038?:
0331           1183   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:324: if (FreqBuffer[ReadCount]>0.99*FRQFORWARD && FreqBuffer[ReadCount]<1.01*FRQFORWARD){
0331 EC        1184            mov     a,r4
0332 2C        1185            add     a,r4
0333 25E0      1186            add     a,acc
0335 FD        1187            mov     r5,a
0336 24E0      1188            add     a,#_FreqBuffer
0338 F8        1189            mov     r0,a
0339 8606      1190            mov     ar6,@r0
033B 08        1191            inc     r0
033C 8607      1192            mov     ar7,@r0
033E 08        1193            inc     r0
033F 8603      1194            mov     ar3,@r0
0341 08        1195            inc     r0
0342 8602      1196            mov     ar2,@r0
0344 18        1197            dec     r0
0345 18        1198            dec     r0
0346 18        1199            dec     r0
0347 C004      1200            push    ar4
0349 C005      1201            push    ar5
034B E4        1202            clr     a
034C C0E0      1203            push    acc
034E 74B6      1204            mov     a,#0xB6
0350 C0E0      1205            push    acc
0352 7482      1206            mov     a,#0x82
0354 C0E0      1207            push    acc
0356 7446      1208            mov     a,#0x46
0358 C0E0      1209            push    acc
035A 8E82      1210            mov     dpl,r6
035C 8F83      1211            mov     dph,r7
035E 8BF0      1212            mov     b,r3
0360 EA        1213            mov     a,r2
0361 120100    1214            lcall   ___fsgt
0364 AA82      1215            mov     r2,dpl
0366 E581      1216            mov     a,sp
0368 24FC      1217            add     a,#0xfc
036A F581      1218            mov     sp,a
036C D005      1219            pop     ar5
036E D004      1220            pop     ar4
0370 EA        1221            mov     a,r2
0371 6001      1222            jz      L013004?
0373 ED        1223            mov     a,r5
0374 24E0      1224            add     a,#_FreqBuffer
0376 F8        1225            mov     r0,a
0377 8602      1226            mov     ar2,@r0
0379 08        1227            inc     r0
037A 8603      1228            mov     ar3,@r0
037C 08        1229            inc     r0
037D 8605      1230            mov     ar5,@r0
037F 08        1231            inc     r0
0380 8606      1232            mov     ar6,@r0
0382 18        1233            dec     r0
0383 18        1234            dec     r0
0384 18        1235            dec     r0
0385 C004      1236            push    ar4
0387 E4        1237            clr     a
0388 C0E0      1238            push    acc
038A 745A      1239            mov     a,#0x5A
038C C0E0      1240            push    acc
038E 7485      1241            mov     a,#0x85
0390 C0E0      1242            push    acc
0392 7446      1243            mov     a,#0x46
0394 C0E0      1244            push    acc
0396 8A82      1245            mov     dpl,r2
0398 8B83      1246            mov     dph,r3
039A 8DF0      1247            mov     b,r5
039C EE        1248            mov     a,r6
039D 120100    1249            lcall   ___fslt
03A0 AA82      1250            mov     r2,dpl
03A2 E581      1251            mov     a,sp
03A4 24FC      1252            add     a,#0xfc
03A6 F581      1253            mov     sp,a
03A8 D004      1254            pop     ar4
03AA EA        1255            mov     a,r2
03AB 6001      1256            jz      L013004?
03AD           1257   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:325: ForwardSigCount++;
03AD 05A8      1258            inc     _DetermineMode_ForwardSigCount_1_72
03AF           1259   L013004?:
03AF           1260   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:327: if (FreqBuffer[ReadCount]>0.98*FRQSTOP && FreqBuffer[ReadCount]<1.02*FRQSTOP){
03AF EC        1261            mov     a,r4
03B0 2C        1262            add     a,r4
03B1 25E0      1263            add     a,acc
03B3 FA        1264            mov     r2,a
03B4 24E0      1265            add     a,#_FreqBuffer
03B6 F8        1266            mov     r0,a
03B7 8603      1267            mov     ar3,@r0
03B9 08        1268            inc     r0
03BA 8605      1269            mov     ar5,@r0
03BC 08        1270            inc     r0
03BD 8606      1271            mov     ar6,@r0
03BF 08        1272            inc     r0
03C0 8607      1273            mov     ar7,@r0
03C2 18        1274            dec     r0
03C3 18        1275            dec     r0
03C4 18        1276            dec     r0
03C5 C002      1277            push    ar2
03C7 C004      1278            push    ar4
03C9 E4        1279            clr     a
03CA C0E0      1280            push    acc
03CC 7438      1281            mov     a,#0x38
03CE C0E0      1282            push    acc
03D0 7467      1283            mov     a,#0x67
03D2 C0E0      1284            push    acc
03D4 7446      1285            mov     a,#0x46
03D6 C0E0      1286            push    acc
03D8 8B82      1287            mov     dpl,r3
03DA 8D83      1288            mov     dph,r5
03DC 8EF0      1289            mov     b,r6
03DE EF        1290            mov     a,r7
03DF 120100    1291            lcall   ___fsgt
03E2 AB82      1292            mov     r3,dpl
03E4 E581      1293            mov     a,sp
03E6 24FC      1294            add     a,#0xfc
03E8 F581      1295            mov     sp,a
03EA D004      1296            pop     ar4
03EC D002      1297            pop     ar2
03EE EB        1298            mov     a,r3
03EF 6001      1299            jz      L013019?
03F1 EA        1300            mov     a,r2
03F2 24E0      1301            add     a,#_FreqBuffer
03F4 F8        1302            mov     r0,a
03F5 8602      1303            mov     ar2,@r0
03F7 08        1304            inc     r0
03F8 8603      1305            mov     ar3,@r0
03FA 08        1306            inc     r0
03FB 8605      1307            mov     ar5,@r0
03FD 08        1308            inc     r0
03FE 8606      1309            mov     ar6,@r0
0400 18        1310            dec     r0
0401 18        1311            dec     r0
0402 18        1312            dec     r0
0403 C004      1313            push    ar4
0405 E4        1314            clr     a
0406 C0E0      1315            push    acc
0408 74A8      1316            mov     a,#0xA8
040A C0E0      1317            push    acc
040C 7470      1318            mov     a,#0x70
040E C0E0      1319            push    acc
0410 7446      1320            mov     a,#0x46
0412 C0E0      1321            push    acc
0414 8A82      1322            mov     dpl,r2
0416 8B83      1323            mov     dph,r3
0418 8DF0      1324            mov     b,r5
041A EE        1325            mov     a,r6
041B 120100    1326            lcall   ___fslt
041E AA82      1327            mov     r2,dpl
0420 E581      1328            mov     a,sp
0422 24FC      1329            add     a,#0xfc
0424 F581      1330            mov     sp,a
0426 D004      1331            pop     ar4
0428 EA        1332            mov     a,r2
0429 6001      1333            jz      L013019?
042B           1334   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:328: StopSigCount++;  
042B 0508      1335            inc     _DetermineMode_StopSigCount_1_72
042D           1336   L013019?:
042D           1337   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:323: for (ReadCount=0; ReadCount<4; ReadCount++){
042D 0C        1338            inc     r4
042E 020100    1339            ljmp    L013017?
0431           1340   L013020?:
0431           1341   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:333: if (StopSigCount > 2){
0431 E508      1342            mov     a,_DetermineMode_StopSigCount_1_72
0433 24FD      1343            add     a,#0xff - 0x02
0435 5001      1344            jnc     L013010?
0437           1345   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:334: mode = STOP;
0437 E4        1346            clr     a
0438 F520      1347            mov     _mode,a
043A F521      1348            mov     (_mode + 1),a
043C           1349   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:335: printf("Entered stop mode");
043C 74E8      1350            mov     a,#__str_0
043E C0E0      1351            push    acc
0440 74A7      1352            mov     a,#(__str_0 >> 8)
0442 C0E0      1353            push    acc
0444 7480      1354            mov     a,#0x80
0446 C0E0      1355            push    acc
0448 120100    1356            lcall   _printf
044B 1581      1357            dec     sp
044D 1581      1358            dec     sp
044F 1581      1359            dec     sp
0451           1360   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:336: return;
0451 22        1361            ret
0452           1362   L013010?:
0452           1363   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:340: if (ForwardSigCount > 2){
0452 E5A8      1364            mov     a,_DetermineMode_ForwardSigCount_1_72
0454 24FD      1365            add     a,#0xff - 0x02
0456 5001      1366            jnc     L013021?
0458           1367   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:341: mode = FORWARD;
0458 752003    1368            mov     _mode,#0x03
045B E4        1369            clr     a
045C F521      1370            mov     (_mode + 1),a
045E           1371   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:342: printf("Entered forward mode");
045E 74A8      1372            mov     a,#__str_1
0460 C0E0      1373            push    acc
0462 74A8      1374            mov     a,#(__str_1 >> 8)
0464 C0E0      1375            push    acc
0466 7480      1376            mov     a,#0x80
0468 C0E0      1377            push    acc
046A 120100    1378            lcall   _printf
046D 1581      1379            dec     sp
046F 1581      1380            dec     sp
0471 1581      1381            dec     sp
0473           1382   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:343: while (frequency< FRQLOW || frequency>FRQHIGH){
0473           1383   L013012?:
0473 E4        1384            clr     a
0474 C0E0      1385            push    acc
0476 74E0      1386            mov     a,#0xE0
0478 C0E0      1387            push    acc
047A 7476      1388            mov     a,#0x76
047C C0E0      1389            push    acc
047E 7446      1390            mov     a,#0x46
0480 C0E0      1391            push    acc
0482 856082    1392            mov     dpl,_frequency
0485 856183    1393            mov     dph,(_frequency + 1)
0488 8562F0    1394            mov     b,(_frequency + 2)
048B E563      1395            mov     a,(_frequency + 3)
048D 120100    1396            lcall   ___fslt
0490 AA82      1397            mov     r2,dpl
0492 E581      1398            mov     a,sp
0494 24FC      1399            add     a,#0xfc
0496 F581      1400            mov     sp,a
0498 EA        1401            mov     a,r2
0499 7001      1402            jnz     L013013?
049B C0E0      1403            push    acc
049D 74B0      1404            mov     a,#0xB0
049F C0E0      1405            push    acc
04A1 747E      1406            mov     a,#0x7E
04A3 C0E0      1407            push    acc
04A5 7446      1408            mov     a,#0x46
04A7 C0E0      1409            push    acc
04A9 856082    1410            mov     dpl,_frequency
04AC 856183    1411            mov     dph,(_frequency + 1)
04AF 8562F0    1412            mov     b,(_frequency + 2)
04B2 E563      1413            mov     a,(_frequency + 3)
04B4 120100    1414            lcall   ___fsgt
04B7 AA82      1415            mov     r2,dpl
04B9 E581      1416            mov     a,sp
04BB 24FC      1417            add     a,#0xfc
04BD F581      1418            mov     sp,a
04BF EA        1419            mov     a,r2
04C0 6001      1420            jz      L013014?
04C2           1421   L013013?:
04C2           1422   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:344: power=0;
04C2 752000    1423            mov     _power,#0x00
04C5           1424   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:345: ReadFrequency();                   
04C5 120100    1425            lcall   _ReadFrequency
04C8 8001      1426            sjmp    L013012?
04CA           1427   L013014?:
04CA           1428   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:348: power=30;
04CA 75201E    1429            mov     _power,#0x1E
04CD           1430   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:349: return;
04CD           1431   L013021?:
04CD 22        1432            ret
04CE           1433   ;------------------------------------------------------------
04CE           1434   ;Allocation info for local variables in function 'MotorControl'
04CE           1435   ;------------------------------------------------------------
04CE           1436   ;IndVolts                  Allocated with name '_MotorControl_IndVolts_1_80'
04CE           1437   ;sloc0                     Allocated with name '_MotorControl_sloc0_1_0'
04CE           1438   ;sloc1                     Allocated with name '_MotorControl_sloc1_1_0'
04CE           1439   ;sloc2                     Allocated with name '_MotorControl_sloc2_1_0'
04CE           1440   ;------------------------------------------------------------
04CE           1441   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:360: void MotorControl (volatile float IndVolts[])
04CE           1442   ;        -----------------------------------------
04CE           1443   ;         function MotorControl
04CE           1444   ;        -----------------------------------------
04CE           1445   _MotorControl:
04CE 858258    1446            mov     _MotorControl_IndVolts_1_80,dpl
04D1 858359    1447            mov     (_MotorControl_IndVolts_1_80 + 1),dph
04D4 85F05A    1448            mov     (_MotorControl_IndVolts_1_80 + 2),b
04D7           1449   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:363: switch (mode){
04D7 E4        1450            clr     a
04D8 B520A8    1451            cjne    a,_mode,L014037?
04DB E4        1452            clr     a
04DC B521A8    1453            cjne    a,(_mode + 1),L014037?
04DF 020100    1454            ljmp    L014023?
04E2           1455   L014037?:
04E2 7403      1456            mov     a,#0x03
04E4 B52028    1457            cjne    a,_mode,L014038?
04E7 E4        1458            clr     a
04E8 B52128    1459            cjne    a,(_mode + 1),L014038?
04EB 8001      1460            sjmp    L014001?
04ED           1461   L014038?:
04ED 7404      1462            mov     a,#0x04
04EF B520A8    1463            cjne    a,_mode,L014039?
04F2 E4        1464            clr     a
04F3 B521A8    1465            cjne    a,(_mode + 1),L014039?
04F6 020100    1466            ljmp    L014008?
04F9           1467   L014039?:
04F9 22        1468            ret
04FA           1469   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:365: case FORWARD:
04FA           1470   L014001?:
04FA           1471   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:366: if((IndVolts[0] - Vblue_middle) > Vblue_thresh){
04FA AA58      1472            mov     r2,_MotorControl_IndVolts_1_80
04FC AB59      1473            mov     r3,(_MotorControl_IndVolts_1_80 + 1)
04FE AC5A      1474            mov     r4,(_MotorControl_IndVolts_1_80 + 2)
0500 8A82      1475            mov     dpl,r2
0502 8B83      1476            mov     dph,r3
0504 8CF0      1477            mov     b,r4
0506 120100    1478            lcall   __gptrget
0509 FD        1479            mov     r5,a
050A A3        1480            inc     dptr
050B 120100    1481            lcall   __gptrget
050E FE        1482            mov     r6,a
050F A3        1483            inc     dptr
0510 120100    1484            lcall   __gptrget
0513 FF        1485            mov     r7,a
0514 A3        1486            inc     dptr
0515 120100    1487            lcall   __gptrget
0518 F8        1488            mov     r0,a
0519 C002      1489            push    ar2
051B C003      1490            push    ar3
051D C004      1491            push    ar4
051F 7462      1492            mov     a,#0x62
0521 C0E0      1493            push    acc
0523 7410      1494            mov     a,#0x10
0525 C0E0      1495            push    acc
0527 74F8      1496            mov     a,#0xF8
0529 C0E0      1497            push    acc
052B 743E      1498            mov     a,#0x3E
052D C0E0      1499            push    acc
052F 8D82      1500            mov     dpl,r5
0531 8E83      1501            mov     dph,r6
0533 8FF0      1502            mov     b,r7
0535 E8        1503            mov     a,r0
0536 120100    1504            lcall   ___fssub
0539 AD82      1505            mov     r5,dpl
053B AE83      1506            mov     r6,dph
053D AFF0      1507            mov     r7,b
053F F8        1508            mov     r0,a
0540 E581      1509            mov     a,sp
0542 24FC      1510            add     a,#0xfc
0544 F581      1511            mov     sp,a
0546 74AC      1512            mov     a,#0xAC
0548 C0E0      1513            push    acc
054A 741C      1514            mov     a,#0x1C
054C C0E0      1515            push    acc
054E 74DA      1516            mov     a,#0xDA
0550 C0E0      1517            push    acc
0552 743D      1518            mov     a,#0x3D
0554 C0E0      1519            push    acc
0556 8D82      1520            mov     dpl,r5
0558 8E83      1521            mov     dph,r6
055A 8FF0      1522            mov     b,r7
055C E8        1523            mov     a,r0
055D 120100    1524            lcall   ___fsgt
0560 AD82      1525            mov     r5,dpl
0562 E581      1526            mov     a,sp
0564 24FC      1527            add     a,#0xfc
0566 F581      1528            mov     sp,a
0568 D004      1529            pop     ar4
056A D003      1530            pop     ar3
056C D002      1531            pop     ar2
056E ED        1532            mov     a,r5
056F 6001      1533            jz      L014006?
0571           1534   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:367: pwm_BLU1= 0;
0571 75A000    1535            mov     _pwm_BLU1,#0x00
0574           1536   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:368: pwm_BLU0 = 0;
0574 75E000    1537            mov     _pwm_BLU0,#0x00
0577           1538   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:369: pwm_RED1 = power;
0577 852020    1539            mov     _pwm_RED1,_power
057A           1540   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:370: pwm_RED0 = 0; 
057A 756000    1541            mov     _pwm_RED0,#0x00
057D 22        1542            ret
057E           1543   L014006?:
057E           1544   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:373: else if( (IndVolts[1] - Vred_middle) > Vred_thresh ){
057E 7404      1545            mov     a,#0x04
0580 2A        1546            add     a,r2
0581 FA        1547            mov     r2,a
0582 E4        1548            clr     a
0583 3B        1549            addc    a,r3
0584 FB        1550            mov     r3,a
0585 8A82      1551            mov     dpl,r2
0587 8B83      1552            mov     dph,r3
0589 8CF0      1553            mov     b,r4
058B 120100    1554            lcall   __gptrget
058E FA        1555            mov     r2,a
058F A3        1556            inc     dptr
0590 120100    1557            lcall   __gptrget
0593 FB        1558            mov     r3,a
0594 A3        1559            inc     dptr
0595 120100    1560            lcall   __gptrget
0598 FC        1561            mov     r4,a
0599 A3        1562            inc     dptr
059A 120100    1563            lcall   __gptrget
059D FD        1564            mov     r5,a
059E 741B      1565            mov     a,#0x1B
05A0 C0E0      1566            push    acc
05A2 742F      1567            mov     a,#0x2F
05A4 C0E0      1568            push    acc
05A6 74CD      1569            mov     a,#0xCD
05A8 C0E0      1570            push    acc
05AA 743E      1571            mov     a,#0x3E
05AC C0E0      1572            push    acc
05AE 8A82      1573            mov     dpl,r2
05B0 8B83      1574            mov     dph,r3
05B2 8CF0      1575            mov     b,r4
05B4 ED        1576            mov     a,r5
05B5 120100    1577            lcall   ___fssub
05B8 AA82      1578            mov     r2,dpl
05BA AB83      1579            mov     r3,dph
05BC ACF0      1580            mov     r4,b
05BE FD        1581            mov     r5,a
05BF E581      1582            mov     a,sp
05C1 24FC      1583            add     a,#0xfc
05C3 F581      1584            mov     sp,a
05C5 74AC      1585            mov     a,#0xAC
05C7 C0E0      1586            push    acc
05C9 741C      1587            mov     a,#0x1C
05CB C0E0      1588            push    acc
05CD 745A      1589            mov     a,#0x5A
05CF C0E0      1590            push    acc
05D1 743D      1591            mov     a,#0x3D
05D3 C0E0      1592            push    acc
05D5 8A82      1593            mov     dpl,r2
05D7 8B83      1594            mov     dph,r3
05D9 8CF0      1595            mov     b,r4
05DB ED        1596            mov     a,r5
05DC 120100    1597            lcall   ___fsgt
05DF AA82      1598            mov     r2,dpl
05E1 E581      1599            mov     a,sp
05E3 24FC      1600            add     a,#0xfc
05E5 F581      1601            mov     sp,a
05E7 EA        1602            mov     a,r2
05E8 6001      1603            jz      L014003?
05EA           1604   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:374: pwm_BLU1=power;
05EA 8520A0    1605            mov     _pwm_BLU1,_power
05ED           1606   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:375: pwm_BLU0=0;
05ED 75E000    1607            mov     _pwm_BLU0,#0x00
05F0           1608   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:376: pwm_RED1=0;
05F0 752000    1609            mov     _pwm_RED1,#0x00
05F3           1610   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:377: pwm_RED0=0;
05F3 756000    1611            mov     _pwm_RED0,#0x00
05F6 22        1612            ret
05F7           1613   L014003?:
05F7           1614   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:380: pwm_BLU1 = power;
05F7 8520A0    1615            mov     _pwm_BLU1,_power
05FA           1616   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:381: pwm_BLU0 = 0;
05FA 75E000    1617            mov     _pwm_BLU0,#0x00
05FD           1618   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:382: pwm_RED1 = power;
05FD 852020    1619            mov     _pwm_RED1,_power
0600           1620   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:383: pwm_RED0 = 0;
0600 756000    1621            mov     _pwm_RED0,#0x00
0603           1622   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:385: break;
0603 22        1623            ret
0604           1624   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:388: case BACKWARD:
0604           1625   L014008?:
0604           1626   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:389: if(IndVolts[0] > Vblue_thresh + 0.1 || IndVolts[0]/IndVolts[1] > 1){
0604 8558A8    1627            mov     _MotorControl_sloc0_1_0,_MotorControl_IndVolts_1_80
0607 8559A9    1628            mov     (_MotorControl_sloc0_1_0 + 1),(_MotorControl_IndVolts_1_80 + 1)
060A 855AAA    1629            mov     (_MotorControl_sloc0_1_0 + 2),(_MotorControl_IndVolts_1_80 + 2)
060D 85A882    1630            mov     dpl,_MotorControl_sloc0_1_0
0610 85A983    1631            mov     dph,(_MotorControl_sloc0_1_0 + 1)
0613 85AAF0    1632            mov     b,(_MotorControl_sloc0_1_0 + 2)
0616 120100    1633            lcall   __gptrget
0619 FD        1634            mov     r5,a
061A A3        1635            inc     dptr
061B 120100    1636            lcall   __gptrget
061E FE        1637            mov     r6,a
061F A3        1638            inc     dptr
0620 120100    1639            lcall   __gptrget
0623 FF        1640            mov     r7,a
0624 A3        1641            inc     dptr
0625 120100    1642            lcall   __gptrget
0628 F8        1643            mov     r0,a
0629 C005      1644            push    ar5
062B C006      1645            push    ar6
062D C007      1646            push    ar7
062F C000      1647            push    ar0
0631 74BC      1648            mov     a,#0xBC
0633 C0E0      1649            push    acc
0635 7474      1650            mov     a,#0x74
0637 C0E0      1651            push    acc
0639 7453      1652            mov     a,#0x53
063B C0E0      1653            push    acc
063D 743E      1654            mov     a,#0x3E
063F C0E0      1655            push    acc
0641 8D82      1656            mov     dpl,r5
0643 8E83      1657            mov     dph,r6
0645 8FF0      1658            mov     b,r7
0647 E8        1659            mov     a,r0
0648 120100    1660            lcall   ___fsgt
064B A982      1661            mov     r1,dpl
064D E581      1662            mov     a,sp
064F 24FC      1663            add     a,#0xfc
0651 F581      1664            mov     sp,a
0653 D000      1665            pop     ar0
0655 D007      1666            pop     ar7
0657 D006      1667            pop     ar6
0659 D005      1668            pop     ar5
065B E9        1669            mov     a,r1
065C 6001      1670            jz      L014042?
065E 020100    1671            ljmp    L014019?
0661           1672   L014042?:
0661 7404      1673            mov     a,#0x04
0663 25A8      1674            add     a,_MotorControl_sloc0_1_0
0665 F9        1675            mov     r1,a
0666 E4        1676            clr     a
0667 35A9      1677            addc    a,(_MotorControl_sloc0_1_0 + 1)
0669 FA        1678            mov     r2,a
066A ABAA      1679            mov     r3,(_MotorControl_sloc0_1_0 + 2)
066C 8982      1680            mov     dpl,r1
066E 8A83      1681            mov     dph,r2
0670 8BF0      1682            mov     b,r3
0672 120100    1683            lcall   __gptrget
0675 F548      1684            mov     _MotorControl_sloc2_1_0,a
0677 A3        1685            inc     dptr
0678 120100    1686            lcall   __gptrget
067B F549      1687            mov     (_MotorControl_sloc2_1_0 + 1),a
067D A3        1688            inc     dptr
067E 120100    1689            lcall   __gptrget
0681 F54A      1690            mov     (_MotorControl_sloc2_1_0 + 2),a
0683 A3        1691            inc     dptr
0684 120100    1692            lcall   __gptrget
0687 F54B      1693            mov     (_MotorControl_sloc2_1_0 + 3),a
0689 C005      1694            push    ar5
068B C006      1695            push    ar6
068D C007      1696            push    ar7
068F C000      1697            push    ar0
0691 C048      1698            push    _MotorControl_sloc2_1_0
0693 C049      1699            push    (_MotorControl_sloc2_1_0 + 1)
0695 C04A      1700            push    (_MotorControl_sloc2_1_0 + 2)
0697 C04B      1701            push    (_MotorControl_sloc2_1_0 + 3)
0699 8D82      1702            mov     dpl,r5
069B 8E83      1703            mov     dph,r6
069D 8FF0      1704            mov     b,r7
069F E8        1705            mov     a,r0
06A0 120100    1706            lcall   ___fsdiv
06A3 8582F8    1707            mov     _MotorControl_sloc1_1_0,dpl
06A6 8583F9    1708            mov     (_MotorControl_sloc1_1_0 + 1),dph
06A9 85F0FA    1709            mov     (_MotorControl_sloc1_1_0 + 2),b
06AC F5FB      1710            mov     (_MotorControl_sloc1_1_0 + 3),a
06AE E581      1711            mov     a,sp
06B0 24FC      1712            add     a,#0xfc
06B2 F581      1713            mov     sp,a
06B4 E4        1714            clr     a
06B5 C0E0      1715            push    acc
06B7 C0E0      1716            push    acc
06B9 7480      1717            mov     a,#0x80
06BB C0E0      1718            push    acc
06BD 743F      1719            mov     a,#0x3F
06BF C0E0      1720            push    acc
06C1 85F882    1721            mov     dpl,_MotorControl_sloc1_1_0
06C4 85F983    1722            mov     dph,(_MotorControl_sloc1_1_0 + 1)
06C7 85FAF0    1723            mov     b,(_MotorControl_sloc1_1_0 + 2)
06CA E5FB      1724            mov     a,(_MotorControl_sloc1_1_0 + 3)
06CC 120100    1725            lcall   ___fsgt
06CF AA82      1726            mov     r2,dpl
06D1 E581      1727            mov     a,sp
06D3 24FC      1728            add     a,#0xfc
06D5 F581      1729            mov     sp,a
06D7 D000      1730            pop     ar0
06D9 D007      1731            pop     ar7
06DB D006      1732            pop     ar6
06DD D005      1733            pop     ar5
06DF EA        1734            mov     a,r2
06E0 7001      1735            jnz     L014043?
06E2 020100    1736            ljmp    L014020?
06E5           1737   L014043?:
06E5           1738   L014019?:
06E5           1739   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:390: if (IndVolts[0]/IndVolts[1]>1.1){
06E5 7404      1740            mov     a,#0x04
06E7 25A8      1741            add     a,_MotorControl_sloc0_1_0
06E9 FA        1742            mov     r2,a
06EA E4        1743            clr     a
06EB 35A9      1744            addc    a,(_MotorControl_sloc0_1_0 + 1)
06ED FB        1745            mov     r3,a
06EE ACAA      1746            mov     r4,(_MotorControl_sloc0_1_0 + 2)
06F0 8A82      1747            mov     dpl,r2
06F2 8B83      1748            mov     dph,r3
06F4 8CF0      1749            mov     b,r4
06F6 120100    1750            lcall   __gptrget
06F9 FA        1751            mov     r2,a
06FA A3        1752            inc     dptr
06FB 120100    1753            lcall   __gptrget
06FE FB        1754            mov     r3,a
06FF A3        1755            inc     dptr
0700 120100    1756            lcall   __gptrget
0703 FC        1757            mov     r4,a
0704 A3        1758            inc     dptr
0705 120100    1759            lcall   __gptrget
0708 F9        1760            mov     r1,a
0709 C002      1761            push    ar2
070B C003      1762            push    ar3
070D C004      1763            push    ar4
070F C001      1764            push    ar1
0711 8D82      1765            mov     dpl,r5
0713 8E83      1766            mov     dph,r6
0715 8FF0      1767            mov     b,r7
0717 E8        1768            mov     a,r0
0718 120100    1769            lcall   ___fsdiv
071B AA82      1770            mov     r2,dpl
071D AB83      1771            mov     r3,dph
071F ACF0      1772            mov     r4,b
0721 FD        1773            mov     r5,a
0722 E581      1774            mov     a,sp
0724 24FC      1775            add     a,#0xfc
0726 F581      1776            mov     sp,a
0728 74CD      1777            mov     a,#0xCD
072A C0E0      1778            push    acc
072C 74CC      1779            mov     a,#0xCC
072E C0E0      1780            push    acc
0730 748C      1781            mov     a,#0x8C
0732 C0E0      1782            push    acc
0734 743F      1783            mov     a,#0x3F
0736 C0E0      1784            push    acc
0738 8A82      1785            mov     dpl,r2
073A 8B83      1786            mov     dph,r3
073C 8CF0      1787            mov     b,r4
073E ED        1788            mov     a,r5
073F 120100    1789            lcall   ___fsgt
0742 AA82      1790            mov     r2,dpl
0744 E581      1791            mov     a,sp
0746 24FC      1792            add     a,#0xfc
0748 F581      1793            mov     sp,a
074A EA        1794            mov     a,r2
074B 6001      1795            jz      L014010?
074D           1796   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:391: pwm_RED0=2*power;
074D E520      1797            mov     a,_power
074F 25E0      1798            add     a,acc
0751 F560      1799            mov     _pwm_RED0,a
0753           1800   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:392: pwm_RED1=0;
0753 752000    1801            mov     _pwm_RED1,#0x00
0756           1802   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:393: pwm_BLU0=0;
0756 75E000    1803            mov     _pwm_BLU0,#0x00
0759           1804   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:394: pwm_BLU1=0;
0759 75A000    1805            mov     _pwm_BLU1,#0x00
075C 22        1806            ret
075D           1807   L014010?:
075D           1808   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:398: pwm_BLU0= power;
075D 8520E0    1809            mov     _pwm_BLU0,_power
0760           1810   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:399: pwm_BLU1 = 0;
0760 75A000    1811            mov     _pwm_BLU1,#0x00
0763           1812   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:400: pwm_RED0 = 0;
0763 756000    1813            mov     _pwm_RED0,#0x00
0766           1814   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:401: pwm_RED1 = 0; 
0766 752000    1815            mov     _pwm_RED1,#0x00
0769 22        1816            ret
076A           1817   L014020?:
076A           1818   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:405: else if(IndVolts[1] > Vred_thresh + 0.1 || IndVolts[0]/IndVolts[1] < 1){
076A 7491      1819            mov     a,#0x91
076C C0E0      1820            push    acc
076E 74ED      1821            mov     a,#0xED
0770 C0E0      1822            push    acc
0772 741C      1823            mov     a,#0x1C
0774 C0E0      1824            push    acc
0776 743E      1825            mov     a,#0x3E
0778 C0E0      1826            push    acc
077A 854882    1827            mov     dpl,_MotorControl_sloc2_1_0
077D 854983    1828            mov     dph,(_MotorControl_sloc2_1_0 + 1)
0780 854AF0    1829            mov     b,(_MotorControl_sloc2_1_0 + 2)
0783 E54B      1830            mov     a,(_MotorControl_sloc2_1_0 + 3)
0785 120100    1831            lcall   ___fsgt
0788 AA82      1832            mov     r2,dpl
078A E581      1833            mov     a,sp
078C 24FC      1834            add     a,#0xfc
078E F581      1835            mov     sp,a
0790 EA        1836            mov     a,r2
0791 7001      1837            jnz     L014015?
0793 C0E0      1838            push    acc
0795 C0E0      1839            push    acc
0797 7480      1840            mov     a,#0x80
0799 C0E0      1841            push    acc
079B 743F      1842            mov     a,#0x3F
079D C0E0      1843            push    acc
079F 85F882    1844            mov     dpl,_MotorControl_sloc1_1_0
07A2 85F983    1845            mov     dph,(_MotorControl_sloc1_1_0 + 1)
07A5 85FAF0    1846            mov     b,(_MotorControl_sloc1_1_0 + 2)
07A8 E5FB      1847            mov     a,(_MotorControl_sloc1_1_0 + 3)
07AA 120100    1848            lcall   ___fslt
07AD AA82      1849            mov     r2,dpl
07AF E581      1850            mov     a,sp
07B1 24FC      1851            add     a,#0xfc
07B3 F581      1852            mov     sp,a
07B5 EA        1853            mov     a,r2
07B6 6001      1854            jz      L014016?
07B8           1855   L014015?:
07B8           1856   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:406: if (IndVolts[0]/IndVolts[1]<0.8){
07B8 74CD      1857            mov     a,#0xCD
07BA C0E0      1858            push    acc
07BC 74CC      1859            mov     a,#0xCC
07BE C0E0      1860            push    acc
07C0 744C      1861            mov     a,#0x4C
07C2 C0E0      1862            push    acc
07C4 743F      1863            mov     a,#0x3F
07C6 C0E0      1864            push    acc
07C8 85F882    1865            mov     dpl,_MotorControl_sloc1_1_0
07CB 85F983    1866            mov     dph,(_MotorControl_sloc1_1_0 + 1)
07CE 85FAF0    1867            mov     b,(_MotorControl_sloc1_1_0 + 2)
07D1 E5FB      1868            mov     a,(_MotorControl_sloc1_1_0 + 3)
07D3 120100    1869            lcall   ___fslt
07D6 AA82      1870            mov     r2,dpl
07D8 E581      1871            mov     a,sp
07DA 24FC      1872            add     a,#0xfc
07DC F581      1873            mov     sp,a
07DE EA        1874            mov     a,r2
07DF 6001      1875            jz      L014013?
07E1           1876   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:407: pwm_RED0=0;
07E1           1877   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:408: pwm_RED1=0;
07E1           1878   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:409: pwm_BLU0=2*power;
07E1 E4        1879            clr     a
07E2 F560      1880            mov     _pwm_RED0,a
07E4 F520      1881            mov     _pwm_RED1,a
07E6 E520      1882            mov     a,_power
07E8 25E0      1883            add     a,acc
07EA F5E0      1884            mov     _pwm_BLU0,a
07EC           1885   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:410: pwm_BLU1=0;
07EC 75A000    1886            mov     _pwm_BLU1,#0x00
07EF 22        1887            ret
07F0           1888   L014013?:
07F0           1889   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:414: pwm_BLU0=0;
07F0 75E000    1890            mov     _pwm_BLU0,#0x00
07F3           1891   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:415: pwm_BLU1=0;
07F3 75A000    1892            mov     _pwm_BLU1,#0x00
07F6           1893   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:416: pwm_RED0=power;
07F6 852060    1894            mov     _pwm_RED0,_power
07F9           1895   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:417: pwm_RED1=0;
07F9 752000    1896            mov     _pwm_RED1,#0x00
07FC 22        1897            ret
07FD           1898   L014016?:
07FD           1899   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:421: pwm_BLU0 = power;
07FD 8520E0    1900            mov     _pwm_BLU0,_power
0800           1901   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:422: pwm_BLU1 = 0;
0800 75A000    1902            mov     _pwm_BLU1,#0x00
0803           1903   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:423: pwm_RED0 = power;
0803 852060    1904            mov     _pwm_RED0,_power
0806           1905   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:424: pwm_RED1 = 0;
0806 752000    1906            mov     _pwm_RED1,#0x00
0809           1907   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:426: break;
0809           1908   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:430: case STOP:
0809 22        1909            ret
080A           1910   L014023?:
080A           1911   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:431: pwm_BLU1 = 0;
080A 75A000    1912            mov     _pwm_BLU1,#0x00
080D           1913   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:432: pwm_BLU0 = 0;
080D 75E000    1914            mov     _pwm_BLU0,#0x00
0810           1915   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:433: pwm_RED1 = 0;
0810 752000    1916            mov     _pwm_RED1,#0x00
0813           1917   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:434: pwm_RED0 = 0;
0813 756000    1918            mov     _pwm_RED0,#0x00
0816           1919   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:441: }
0816 22        1920            ret
0817           1921   ;------------------------------------------------------------
0817           1922   ;Allocation info for local variables in function 'DebuggingFctn'
0817           1923   ;------------------------------------------------------------
0817           1924   ;IndVolts                  Allocated with name '_DebuggingFctn_IndVolts_1_93'
0817           1925   ;------------------------------------------------------------
0817           1926   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:452: void DebuggingFctn (volatile float IndVolts[])
0817           1927   ;        -----------------------------------------
0817           1928   ;         function DebuggingFctn
0817           1929   ;        -----------------------------------------
0817           1930   _DebuggingFctn:
0817           1931   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:454: printf("Freq = %5.3f HZ, Mode = %d\r", frequency, mode);
0817 C020      1932            push    _mode
0819 C021      1933            push    (_mode + 1)
081B C060      1934            push    _frequency
081D C061      1935            push    (_frequency + 1)
081F C062      1936            push    (_frequency + 2)
0821 C063      1937            push    (_frequency + 3)
0823 7428      1938            mov     a,#__str_2
0825 C0E0      1939            push    acc
0827 74AE      1940            mov     a,#(__str_2 >> 8)
0829 C0E0      1941            push    acc
082B 7480      1942            mov     a,#0x80
082D C0E0      1943            push    acc
082F 120100    1944            lcall   _printf
0832 E581      1945            mov     a,sp
0834 24F7      1946            add     a,#0xf7
0836 F581      1947            mov     sp,a
0838 22        1948            ret
0839           1949   ;------------------------------------------------------------
0839           1950   ;Allocation info for local variables in function 'main'
0839           1951   ;------------------------------------------------------------
0839           1952   ;IndVolts                  Allocated with name '_main_IndVolts_1_96'
0839           1953   ;------------------------------------------------------------
0839           1954   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:464: void main (void)
0839           1955   ;        -----------------------------------------
0839           1956   ;         function main
0839           1957   ;        -----------------------------------------
0839           1958   _main:
0839           1959   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:471: TIMER0_Init(); // Initialize timer 0 to read the frequency of the fm signal
0839 120100    1960            lcall   _TIMER0_Init
083C           1961   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:472: TIMER2_Init(); // Initialize timer 2 for periodic interrupts used for motor control
083C 120100    1962            lcall   _TIMER2_Init
083F           1963   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:473: EA=1; // Enable interrupts
083F D2AF      1964            setb    _EA
0841           1965   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:475: InitPinADC(1, 4); // Configure P1.4 as analog input
0841 755004    1966            mov     _InitPinADC_PARM_2,#0x04
0844 758201    1967            mov     dpl,#0x01
0847 120100    1968            lcall   _InitPinADC
084A           1969   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:476: InitPinADC(2, 0); // Configure P2.0 as analog input
084A 755000    1970            mov     _InitPinADC_PARM_2,#0x00
084D 758202    1971            mov     dpl,#0x02
0850 120100    1972            lcall   _InitPinADC
0853           1973   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:477: InitPinADC(2, 7); // Configure P2.7 as analog input
0853 755007    1974            mov     _InitPinADC_PARM_2,#0x07
0856 758202    1975            mov     dpl,#0x02
0859 120100    1976            lcall   _InitPinADC
085C           1977   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:478: InitADC();
085C 120100    1978            lcall   _InitADC
085F           1979   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:479: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
085F 7468      1980            mov     a,#__str_3
0861 C0E0      1981            push    acc
0863 74AE      1982            mov     a,#(__str_3 >> 8)
0865 C0E0      1983            push    acc
0867 7480      1984            mov     a,#0x80
0869 C0E0      1985            push    acc
086B 120100    1986            lcall   _printf
086E 1581      1987            dec     sp
0870 1581      1988            dec     sp
0872 1581      1989            dec     sp
0874           1990   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:487: while(1)
0874           1991   L016004?:
0874           1992   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:491: if (millisecond%600==0){
0874 750058    1993            mov     __moduint_PARM_2,#0x58
0877 750102    1994            mov     (__moduint_PARM_2 + 1),#0x02
087A 856082    1995            mov     dpl,_millisecond
087D 856183    1996            mov     dph,(_millisecond + 1)
0880 120100    1997            lcall   __moduint
0883 E582      1998            mov     a,dpl
0885 8583F0    1999            mov     b,dph
0888 45F0      2000            orl     a,b
088A 7001      2001            jnz     L016002?
088C           2002   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:492: DetermineMode();
088C 120100    2003            lcall   _DetermineMode
088F           2004   L016002?:
088F           2005   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:496: IndVolts[0] = Volts_at_Pin(LQFP32_MUX_P2_7);
088F 75820F    2006            mov     dpl,#0x0F
0892 120100    2007            lcall   _Volts_at_Pin
0895 AA82      2008            mov     r2,dpl
0897 AB83      2009            mov     r3,dph
0899 ACF0      2010            mov     r4,b
089B FD        2011            mov     r5,a
089C 8A98      2012            mov     _main_IndVolts_1_96,r2
089E 8B99      2013            mov     (_main_IndVolts_1_96 + 1),r3
08A0 8C9A      2014            mov     (_main_IndVolts_1_96 + 2),r4
08A2 8D9B      2015            mov     (_main_IndVolts_1_96 + 3),r5
08A4           2016   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:497: IndVolts[1] = Volts_at_Pin(LQFP32_MUX_P1_4);
08A4 758204    2017            mov     dpl,#0x04
08A7 120100    2018            lcall   _Volts_at_Pin
08AA AA82      2019            mov     r2,dpl
08AC AB83      2020            mov     r3,dph
08AE ACF0      2021            mov     r4,b
08B0 FD        2022            mov     r5,a
08B1 8A9C      2023            mov     (_main_IndVolts_1_96 + 0x0004),r2
08B3 8B9D      2024            mov     ((_main_IndVolts_1_96 + 0x0004) + 1),r3
08B5 8C9E      2025            mov     ((_main_IndVolts_1_96 + 0x0004) + 2),r4
08B7 8D9F      2026            mov     ((_main_IndVolts_1_96 + 0x0004) + 3),r5
08B9           2027   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:498: IndVolts[2] = Volts_at_Pin(LQFP32_MUX_P2_0);
08B9 758208    2028            mov     dpl,#0x08
08BC 120100    2029            lcall   _Volts_at_Pin
08BF AA82      2030            mov     r2,dpl
08C1 AB83      2031            mov     r3,dph
08C3 ACF0      2032            mov     r4,b
08C5 FD        2033            mov     r5,a
08C6 8AA0      2034            mov     (_main_IndVolts_1_96 + 0x0008),r2
08C8 8BA1      2035            mov     ((_main_IndVolts_1_96 + 0x0008) + 1),r3
08CA 8CA2      2036            mov     ((_main_IndVolts_1_96 + 0x0008) + 2),r4
08CC 8DA3      2037            mov     ((_main_IndVolts_1_96 + 0x0008) + 3),r5
08CE           2038   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:502: MotorControl(IndVolts);
08CE 909B98    2039            mov     dptr,#_main_IndVolts_1_96
08D1 75F040    2040            mov     b,#0x40
08D4 120100    2041            lcall   _MotorControl
08D7           2042   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:505: DebuggingFctn(IndVolts);
08D7 909B98    2043            mov     dptr,#_main_IndVolts_1_96
08DA 75F040    2044            mov     b,#0x40
08DD 120100    2045            lcall   _DebuggingFctn
08E0           2046   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:508: waitms(20);
08E0 900014    2047            mov     dptr,#0x0014
08E3 120100    2048            lcall   _waitms
08E6           2049   ;        D:\DevFiles\ELEC291_Dev_Files\Project2\Receiver.c:509: millisecond = millisecond + 20;
08E6 7414      2050            mov     a,#0x14
08E8 2560      2051            add     a,_millisecond
08EA F560      2052            mov     _millisecond,a
08EC E4        2053            clr     a
08ED 3561      2054            addc    a,(_millisecond + 1)
08EF F561      2055            mov     (_millisecond + 1),a
08F1 020100    2056            ljmp    L016004?
08F4           2057            rseg R_CSEG
08F4           2058   
0000           2059            rseg R_XINIT
0000           2060   
0000           2061            rseg R_CONST
0000           2062   __str_0:
0000 456E7465  2063            db 'Entered stop mode'
     72656420
     73746F70
     206D6F64
     65
0011 00        2064            db 0x00
0012           2065   __str_1:
0012 456E7465  2066            db 'Entered forward mode'
     72656420
     666F7277
     61726420
     6D6F6465
0026 00        2067            db 0x00
0027           2068   __str_2:
0027 46726571  2069            db 'Freq = %5.3f HZ, Mode = %d'
     203D2025
     352E3366
     20485A2C
     204D6F64
     65203D20
     2564
0041 0D        2070            db 0x0D
0042 00        2071            db 0x00
0043           2072   __str_3:
0043 1B        2073            db 0x1B
0044 5B324A    2074            db '[2J'
0047 00        2075            db 0x00
0048           2076   
002E           2077            CSEG
002E           2078   
002E           2079   end
